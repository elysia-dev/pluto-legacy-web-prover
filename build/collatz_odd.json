{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":7586892941357320442,"abi":{"parameters":[{"name":"folding_variables","type":{"kind":"struct","path":"nivc::FoldingVariables","fields":[{"name":"registers","type":{"kind":"array","length":1,"type":{"kind":"field"}}},{"name":"program_counter","type":{"kind":"field"}}]},"visibility":"public"}],"return_type":{"abi_type":{"kind":"struct","path":"nivc::FoldingVariables","fields":[{"name":"registers","type":{"kind":"array","length":1,"type":{"kind":"field"}}},{"name":"program_counter","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"}}},"bytecode":"H4sIAAAAAAAA/81XS27CMBB1fkBIYFOo1FvY+YCzKix6EBBh31v0AL1De4ouu2gXvUQP0gY80jBJiULGFU9CE+zw8uZ5sCeOOGL6+7k1176JrqjDMXFlouwHxcglG+Reyq3oAPYC/AnAEM/EauKNjAVIBMDrJ64mFnOlcpFl5TIpVao2Mim2OpdZvl1opVWu812i07TUmV4W22IpC5mlpdrnRbo3XP7lXIpwyYAvR+kbPx1RBy3Kvrr9M7q7cmO9A5uCK3K3pbC6PmfAt4BqyJivLQ+Hon2H6/qcoeDd4bjzDkzebbXTBsrLud4jRg/x5lzxrsUp+vpAkAaMPoSWfMC8lnxQIaMPY0Zd2Afg/c8OiDEXzg6IIsFeRCbGYAgYWE3ck7FY1E9t7g4Im3hpcZX7IyLBV6gxX46dOiDZD4pTN9Y7sSl4YoF3Kux2LbIfDnlPkcFMvCc7CfdJ4IqrPAms5uxdaU3Ca2tT7lCvLhr3yPzYxM/nr/fXp80O88Qmzr/Xd48fLw+Uf2RiSLjg8Fjx+JUAf2SH/9DpUozRdUTmIH+/4XfOH99dEs/de+6AmDTMAeeNiVgv5BGSOEe8nLUN/DM7/I1rNUfXM5In9nvFpAH4oAkKRB0umYN76X/G4denqBav4VkAqJkZGgM/fwDxPUiIXBQAAA==","debug_symbols":"ldPBCoQgEAbgd5lzB900q1dZlrCyEMTCbGGJ3n0tCkKCmJv//HxzGVygVfXcV9p2wwTlewEzNNLrwYa0ANlH0yjtliYvnYeSMZKAsm14CbEm0GmjoMzy9ZMAxYIXFqRYwLCAY0GGBQILciwo7gAn9ACckvhwBC3ok2CxeKHF7bV5Kk7BaSwYWnC0yNBCPIksFjlaFDgRQu20Mbqvrn8+jL/SaVkbdcRuts2l9b/xbE4/uqFR7ezUtmnvwvo/","file_map":{"68":{"source":"use nivc::FoldingVariables;\n\n/// When the value is odd, multiply it by 3 and add 1.\n/// If the result is even, return 0 to indicate the next program counter, i.e., collatz_even.\n/// Otherwise, return 1 to indicate the next program counter, i.e., collatz_odd.\n/// Note, { f(n) = 3n + 1 } can never be 1, so we don't need to check for that.\npub fn main(folding_variables: pub FoldingVariables<1>) -> pub FoldingVariables<1> {\n    let value = folding_variables.registers[0] as u64;\n\n    let next_value = 3 * value + 1;\n    let next_pc = if next_value % 2 == 0 { 0 } else { 1 };\n\n    FoldingVariables { registers: [next_value as Field], program_counter: next_pc }\n}\n","path":"/Users/hyunminlee/Development/study/ZK/pluto/edge/examples/collatz_odd/src/main.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert"]}